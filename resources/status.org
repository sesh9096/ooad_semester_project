#+TITLE: CSCI4448 Semester Project
#+DESCRIPTION: CSCI4448 Semester Project
#+OPTIONS: toc:nil num:nil
#+BIND: org-latex-title-command "\\begin{center}\\Large %t\\end{center}"
#+EXPORT_FILE_NAME: Project 7 Update.pdf
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \setlist{noitemsep}
#+LATEX_HEADER: \geometry{margin=0.9in}
#+LATEX_HEADER: \pagenumbering{gobble}
* Definote- A dictionary/notetaking app
[[https://github.com/sesh9096/ooad_semester_project/][=https://github.com/sesh9096/ooad_semester_project=]]

Team Members: Sean Shi, Jack Paulman

Tasks Accomplished:
- We produced a UML diagram and BDD scenarios to ensure all users of (Sean Shi)
- Built a Layout/UI using the Jetpack Compose framework which heavily uses Dependency Injection and Composition(Sean Shi)
- We implemented abstractions and some concrete classes for both the Entries and Sorting Strategies (Sean Shi)
- Search Bar (Jack Paulman)
- Adding and searching dictionary (Jack Paulman)

* UML Class Diagram
#+begin_src plantuml :file class-diagram.png
Interface FilterStrategy {
	List<Entries> getEntries(input)
}
note left: this interface is used to\nimplement the strategy pattern
Class Entry{
	Name
	Content
	display()
}
Class EntryFactory{
	makeEntry(name,description)
}
note bottom: Implementation of the\nFactory Pattern
Class Database{
	List<Entry> Dictionaries
	Database getDatabase()
}
Class SimpleFilterStrategy {
	database
	List<Entries> getEntries(input)
}
Class FuzzyFilterStrategy {
	database
	List<Entries> getEntries(input)
}
Class DummyFilterStrategy {
	List<Entries> getEntries(input)
}
Class MainActivity {
	List<FilterStrategy> sortingMethods
}
note bottom: the MainActivity class contains an\ninterface created with Jetpack Compose\nwhich is an example of the\ncomposite pattern
SimpleFilterStrategy ..|> FilterStrategy
FuzzyFilterStrategy ..|> FilterStrategy
DummyFilterStrategy ..|> FilterStrategy
SimpleFilterStrategy ..> Database
FuzzyFilterStrategy ..> Database
Database --o Entry
MainActivity --o FilterStrategy
EntryFactory --> Entry
#+end_src

#+RESULTS:
[[file:class-diagram.png]]


# | Builder   | A pattern to incrementally build complex objects                                     |
# | Factory   | Constructs objects without specifying the exact type                                 |
# | Observer  | Allows external observers to be notified of changes internal to the observable class |
# | Singleton | There can only be one                                                                |
# | Composite | Each of these is either a base node or is composed of nodes                          |

* Challenges
I(Sean Shi) am currently on a trip with the CU Taekwondo team for the National Collegiate Taekwondo Championship held at UC Berkeley,
so we could not record a presentation together. The presentation is split into 2 parts, one is under the resources folder,
The other is linked in the readme.

[[https://drive.google.com/file/d/1MmushJyZLlFWV2vwBFwLi_pSYTJPo0VA/view?usp=sharing]]

* Design Patterns
We are currently using the composite pattern in Jetpack Compose to create a UI.
This allows us to next rows, columns, input fields, and other UI elements including a self defined element for displaying an entry

* Tests/BDD
We were not able to achieve 80% coverage because our project contains a lot of methods for drawing UI elements.
These are difficult to test. See github for further details.

In terms of BDD, we have 2 scenarios written under =app/src/test/resources/features/=

* Plans For next iteration
Next iteration, we plan to implement persistent storage, and add a StrategyBuilder for custom filter methods.
We will also add a second activity(page) to show the detailed contents of each entry when it is clicked on.
We will also try to implement methods of importing Entries.
